"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in to)) {
          if (ar || !(i in to)) to[i] = from[i];
      }
  }
  return to;
};
// The actual compiled code will be much longer, but it's generated by Typescript.
// For your setup, just run the compiler.
// Here's a simplified placeholder:
var words = [
  { word: "oracle", hint: "A mystical prophet who foresees the future." },
  { word: "crystal", hint: "A gemstone often used in mystical practices." },
  { word: "spirit", hint: "An unseen mystical essence or ghost." },
  { word: "moon", hint: "A celestial body associated with magic and mystery." },
  { word: "enchant", hint: "To cast a spell or charm." },
  { word: "amulet", hint: "A magical charm worn for protection." },
  { word: "alchemy", hint: "Ancient mystical science of transforming matter." },
  { word: "spell", hint: "A magical word or phrase." }
];

var selectedWord = "";
var currentHint = "";
var guessedLetters = [];
var remainingAttempts = 6;

function startGame() {
  var index = Math.floor(Math.random() * words.length);
  selectedWord = words[index].word;
  currentHint = words[index].hint;
  guessedLetters = [];
  remainingAttempts = 6;
  updateDisplay();
}

function updateDisplay() {
  var displayWord = "";
  for (var _i = 0, _a = selectedWord.split(""); _i < _a.length; _i++) {
      var ch = _a[_i];
      displayWord += guessedLetters.includes(ch) ? ch + " " : "_ ";
  }
  document.getElementById("word").textContent = displayWord.trim();
  document.getElementById("attempts").textContent = "Attempts left: " + remainingAttempts;
  document.getElementById("letters-guessed").textContent = "Letters guessed: " + guessedLetters.join(", ");
  document.getElementById("hint").textContent = "Hint: " + currentHint;
  updateImage();
}

function updateImage() {
  var index = 6 - remainingAttempts;
  document.getElementById("mystic-image").src = "images/hangman" + index + ".png";
}

function handleGuess() {
  var input = document.getElementById("guess-input");
  if (input instanceof HTMLInputElement) {
      var guess = input.value.toLowerCase();
      input.value = "";
      if (!guess || guess.length !== 1 || !/[a-z]/.test(guess)) {
          alert("Enter a single letter");
          return;
      }
      if (guessedLetters.includes(guess)) {
          alert("Letter already guessed");
          return;
      }
      guessedLetters.push(guess);
      if (selectedWord.includes(guess)) {
          if (isWin()) {
              alert("✨ You found the mystic word! ✨");
          }
      } else {
          remainingAttempts--;
          if (remainingAttempts === 0) {
              alert("☠️ The spirits have forsaken you! Word was: " + selectedWord);
          }
      }
      updateDisplay();
  }
}

function isWin() {
  return selectedWord.split("").every(function (ch) { return guessedLetters.includes(ch); });
}

document.getElementById("guess-btn").addEventListener("click", handleGuess);
document.getElementById("new-game-btn").addEventListener("click", startGame);
document.getElementById("guess-input").addEventListener("keydown", function (e) {
  if (e.key === "Enter") handleGuess();
});

startGame();
